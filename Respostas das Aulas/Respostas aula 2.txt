Data: 15/03/2017

Q1. Quais as diferenças entre os barramentos de dados e de endereços?

R: Barramento é caminho feito entre duas unidades para receber ou transmitir informação e endereços representa exatamente a posição na memória para que se possa ler algum valor.

Q2. Quais são as diferenças entre as memórias RAM e ROM?

R: A memoria Ram ela é volatil e quando acaba a energia ela perde a informação, já a memoria ROM quando acaba a energia ela guarda a informação, podendo ser reutilizada.

Q3. Considere o código abaixo, de 12 linhas:

    1.   #include <stdio.h>
    2.   int main(void)
    3.   {
    4.      int i;
    5.      printf("Insira um número inteiro: ");
    6.      scanf("%d", &i);
    7.      if(i%2)
    8.         printf("%d eh impar.\n");
    9.      else
   10.         printf("%d eh par.\n");
   11.      return 0;
   12.   }

Para este código, responda:
	(a) A variável 'i' é armazenada na memória RAM ou ROM? Por quê? 
R: Ela é armazenada na memoria RAM, pois se o programa for deslgado perde a informação de i.
	(b) O programa compilado a partir deste código é armazenado na memória RAM ou ROM? Por quê?
R:  É compilado na memoria ROM, pois você porerá reutilizar o código.

Q4. Quais são as diferenças, vantagens e desvantagens das arquiteturas Harvard e Von Neumann?
R: Arquitetura tipo Harvard: Caminhos de dados e de instrução distintos, dessa forma, seus componentes internos também estão dispostos em lugares distintos, o que a torna mais rápida porem mais complexa.
Von Neumann: é processada uma única informação por vez, visto que nessa tecnologia, execução e dados percorrem o mesmo barramento, o que torna a arquitetura mais simples porém torna o processo lento em relação à arquitetura Harvard.
 A principal diferença é que a arquitetura de Harvard separa o armazenamento e o trafego das instruções da CPU e dos dados em duas unidades distintas de memória, enquanto a Von Neumann utiliza o mesmo espaço de memória para ambos.


Q5. Considere a variável inteira 'i', armazenando o valor 0x8051ABCD. Se 'i' é armazenada na memória a partir do endereço 0x0200, como ficam este byte e os seguintes, considerando que a memória é:
	(a) Little-endian?
	R: 	0x200: 0xCD
		0x202: 0xAB
		0x204: 0x51
		0x206: 0x80 
	(b) Big-endian?
	R: 	0x200: 0x80
		0x202: 0x51
		0x204: 0xAB
		0x206: 0xCD 
Q6. Sabendo que o processador do MSP430 tem registradores de 16 bits, como ele soma duas variáveis de 32 bits?
R: Verificando a flag de Overflow da própria CPU ou fazendo análise de sinal com a flag de negativo.